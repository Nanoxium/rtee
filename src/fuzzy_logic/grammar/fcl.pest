// // FCL.pest
// 
// // Whitespace and comments
WHITESPACE = _{ " " | "\t"  | "\r" | NEWLINE }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// FCL program
fcl = { SOI ~ function_block+ ~ EOI }
block = {
  function_block |
  var_input |
  var_output |
  fuzzify |
  defuzzify |
  ruleblock
}

function_block = {
  "FUNCTION_BLOCK" ~
  identifier ~
  block* ~
  "END_FUNCTION_BLOCK"
}

var_input = {
  "VAR_INPUT" ~
  declaration+ ~
  "END_VAR"
}
var_output = {
  "VAR_OUTPUT" ~
  declaration+ ~
  "END_VAR"
}
fuzzify = { 
  "FUZZIFY" ~
  identifier ~
  fuzzyset+ ~
  "END_FUZZIFY"
}

defuzzify = { 
  "DEFUZZIFY" ~
  identifier ~
  term+ ~
  method ~
  "END_DEFUZZIFY"
}

ruleblock = {
  "RULEBLOCK" ~
  identifier ~
  operators ~
  rule+ ~
  "END_RULEBLOCK"
}
// ruleblock = { "RULEBLOCK" ~ identifier ~ "END_RULEBLOCK" }
declaration = {
  identifier ~ ":" ~
  var_type ~ ";"
}

fuzzyset = { "TERM" ~ identifier ~ ":=" ~ tuple+ ~ ";" }
term = { "TERM" ~ identifier ~ ":=" ~ tuple+ ~ ";" }
tuple = _{ "(" ~ number ~ "," ~ number ~ ")" }
method = { "METHOD" ~ ":" ~ function_op ~ ";" }
// operators = { ("AND" | "OR" | "ACCU") ~ ":" ~ function_op ~ ";" }
operators = {
  ("AND:" ~ function_op ~ ";")? ~
  ("OR:" ~ function_op ~ ";")? ~
  ("ACCU:" ~ function_op ~ ";")?
}
rule = _{
  ("RULE" ~ number ~ ":") ~
  "IF" ~ antecedent ~
  "THEN" ~ consequent ~ ";"
}
antecedent = {
  expression ~ (condition_op ~ expression)* 
}
condition_op = { "AND" | "OR" }
consequent = { identifier ~ "IS" ~ identifier }
expression = { identifier ~ "IS" ~ identifier }

identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

function_op = @{
  "MIN" |       // Minimum
  "PROD" |      // Product
  "MAX" // |       // Maximum
  // "B_SUM" |     // Bounded sum
  // "B_PROBOR" |  // Bounded probabilistic sum
  // "B_PROBAND" | // Bounded product
  // "COG" |       // Center of gravity
  // "COA" |       // Center of area
  // "MOM" |       // Mean of maximum
  // "SOM" |       // Smallest of maximum
  // "LOM"         // Largest of maximum
}
var_type = @{
  "REAL" |
  // "LREAL" |
  // "INT" |
  // "LINT" |
  // "DINT" |
  // "SINT" |
  // "USINT" |
  // "UINT" |
  // "UDINT" |
  // "ULINT" |
  "BOOL"
}
number = @{ "-"* ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

